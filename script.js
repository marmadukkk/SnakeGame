"use strict";

// ============================================
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
// ============================================
let currentScore = 0; // –¢–µ–∫—É—â–∏–µ –æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞
let isPaused = false; // –§–ª–∞–≥ –ø–∞—É–∑—ã –∏–≥—Ä—ã
let isDead = false; // –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
const scoreElement = document.getElementById("score-display"); // –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—á–∫–æ–≤
const COLLISION_SAFE_SEGMENTS = 4; // –ó–∞—â–∏—Ç–∞ –æ—Ç –ª–æ–∂–Ω—ã—Ö –∫–æ–ª–ª–∏–∑–∏–π —Å –Ω–æ–≤—ã–º–∏ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
const GRID_SIZE = 25; // –†–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏ —Å–µ—Ç–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
const FPS = 15; // –ö–∞–¥—Ä—ã –≤ —Å–µ–∫—É–Ω–¥—É (—Å–∫–æ—Ä–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã)
const CANVAS_ID = "gP"; // ID –∏–≥—Ä–æ–≤–æ–≥–æ —Ö–æ–ª—Å—Ç–∞
const SCORE_PER_APPLE = 100; // –û—á–∫–æ–≤ –∑–∞ –æ–¥–Ω–æ —è–±–ª–æ–∫–æ

// –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∑–º–µ–π–∫–∏
const DIRECTION_RIGHT = 1;
const DIRECTION_DOWN = 2;
const DIRECTION_LEFT = 3;
const DIRECTION_UP = 4;

// –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
const audio = {
  apple: new Audio("https://assets.mixkit.co/active_storage/sfx/2219/2219-preview.mp3"), // –ó–≤—É–∫ —Å—ä–µ–¥–∞–Ω–∏—è —è–±–ª–æ–∫–∞
  death: new Audio("https://assets.mixkit.co/active_storage/sfx/2578/2578-preview.mp3"), // –ó–≤—É–∫ –ø—Ä–æ–∏–≥—Ä—ã—à–∞
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ö–æ–ª—Å—Ç–∞
function setCanvasSize() {
  const headerHeight = document.querySelector(".game-header").offsetHeight;
  const controlsHeight = document.querySelector(".controls-info").offsetHeight;
  canvas.width = Math.min(window.innerWidth, 800);
  canvas.height = window.innerHeight - headerHeight - controlsHeight - 50;
}

// –ò–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
let snakeBody = []; // –°–µ–≥–º–µ–Ω—Ç—ã —Ç–µ–ª–∞ –∑–º–µ–π–∫–∏
let currentDirection = DIRECTION_RIGHT; // –¢–µ–∫—É—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
let applePosition = null; // –ü–æ–∑–∏—Ü–∏—è —è–±–ª–æ–∫–∞ –Ω–∞ –ø–æ–ª–µ

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö–æ–ª—Å—Ç–∞
const canvas = document.getElementById(CANVAS_ID);
const ctx = canvas.getContext("2d");
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

// ============================================
// –û—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
// ============================================

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–≤—É–∫–æ–≤
[audio.apple, audio.death].forEach((sound) => {
  sound.preload = "auto";
  sound.volume = 0.3;
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Å–µ—Ç–∫–∏
function getRandomGridValue(min, max) {
  return Math.floor((Math.random() * (max - min)) / GRID_SIZE) * GRID_SIZE + min;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —è–±–ª–æ–∫–∞ –≤ —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
function spawnApple() {
  applePosition = [
    getRandomGridValue(0, canvas.width - GRID_SIZE),
    getRandomGridValue(0, canvas.height - GRID_SIZE),
  ];
}

// –°–±—Ä–æ—Å –∑–º–µ–π–∫–∏ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
function resetSnake() {
  snakeBody = [
    { x: GRID_SIZE * 4, y: GRID_SIZE * 4 }, // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≥–æ–ª–æ–≤—ã
    { x: GRID_SIZE * 3, y: GRID_SIZE * 4 }, // –ü–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
    { x: GRID_SIZE * 2, y: GRID_SIZE * 4 }, // –í—Ç–æ—Ä–æ–π —Å–µ–≥–º–µ–Ω—Ç
  ];
  currentDirection = DIRECTION_RIGHT; // –ù–∞—á–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  currentScore = 0; // –°–±—Ä–æ—Å –æ—á–∫–æ–≤
  scoreElement.textContent = `üçé ${currentScore}`; // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≥–æ–ª–æ–≤—ã
function computeNewHead() {
  const head = snakeBody[snakeBody.length - 1]; // –¢–µ–∫—É—â–∞—è –≥–æ–ª–æ–≤–∞
  const newHead = { x: head.x, y: head.y }; // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  switch (currentDirection) {
    case DIRECTION_RIGHT: newHead.x += GRID_SIZE; break;
    case DIRECTION_DOWN: newHead.y += GRID_SIZE; break;
    case DIRECTION_LEFT: newHead.x -= GRID_SIZE; break;
    case DIRECTION_UP: newHead.y -= GRID_SIZE; break;
  }
  return newHead;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Ö–æ–ª—Å—Ç–∞
function checkBoundaryCollision(pos) {
  return (
    pos.x < 0 || pos.x >= canvas.width || 
    pos.y < 0 || pos.y >= canvas.height
  );
}

// ============================================
// –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –∏ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
// ============================================

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ—Ä—Ç–∏ –∏–≥—Ä–æ–∫–∞
function handleDeath() {
  isDead = true;
  audio.death.currentTime = 0;
  audio.death.play();
  document.querySelector(".game-over-popup").style.display = "flex";
  document.getElementById("final-score").textContent = currentScore;
}

// –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∏–≥—Ä—ã
function resetGame() {
  document.querySelector(".game-over-popup").style.display = "none";
  isDead = false;
  isPaused = false;
  resetSnake();
  spawnApple();
}

// ============================================
// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏ –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
// ============================================

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–º–µ–π–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π
function updateSnakePosition() {
  const newHead = computeNewHead();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
  if (checkBoundaryCollision(newHead)) {
    handleDeath();
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–º–æ–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–µ–≥–º–µ–Ω—Ç–∞)
  const hasSelfCollision = snakeBody
    .slice(0, -COLLISION_SAFE_SEGMENTS)
    .some(segment => segment.x === newHead.x && segment.y === newHead.y);

  if (hasSelfCollision) {
    handleDeath();
    return;
  }

  snakeBody.push(newHead); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≥–æ–ª–æ–≤—ã
  snakeBody.shift(); // –£–¥–∞–ª–µ–Ω–∏–µ —Ö–≤–æ—Å—Ç–∞

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—ä–µ–¥–∞–Ω–∏—è —è–±–ª–æ–∫–∞
  if (newHead.x === applePosition[0] && newHead.y === applePosition[1]) {
    audio.apple.play();
    spawnApple();
    // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–º–µ–π–∫–∏ –Ω–∞ 2 —Å–µ–≥–º–µ–Ω—Ç–∞
    snakeBody.unshift({ ...snakeBody[0] });
    snakeBody.unshift({ ...snakeBody[0] });
    currentScore += SCORE_PER_APPLE;
    scoreElement.textContent = `üçé ${currentScore}`;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
function renderFrame() {
  if (isPaused || isDead) return;
  updateSnakePosition();

  // –û—á–∏—Å—Ç–∫–∞ —Ö–æ–ª—Å—Ç–∞
  ctx.fillStyle = "#1a1a1a";
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —è–±–ª–æ–∫–∞
  ctx.beginPath();
  ctx.arc(
    applePosition[0] + GRID_SIZE / 2,
    applePosition[1] + GRID_SIZE / 2,
    (GRID_SIZE / 2) * 0.8,
    0,
    Math.PI * 2
  );
  ctx.fillStyle = "#e74c3c";
  ctx.fill();
  ctx.strokeStyle = "#c0392b";
  ctx.stroke();

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–º–µ–π–∫–∏ —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
  snakeBody.forEach((segment) => {
    // –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–≤–µ—á–µ–Ω–∏—è
    const glow = ctx.createRadialGradient(
      segment.x + GRID_SIZE / 2,
      segment.y + GRID_SIZE / 2,
      0,
      segment.x + GRID_SIZE / 2,
      segment.y + GRID_SIZE / 2,
      GRID_SIZE
    );
    glow.addColorStop(0, "#2ecc71aa");
    glow.addColorStop(1, "#27ae6000");

    // –ì—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è —Ç–µ–ª–∞ –∑–º–µ–π–∫–∏
    const bodyGradient = ctx.createLinearGradient(
      segment.x,
      segment.y,
      segment.x + GRID_SIZE,
      segment.y + GRID_SIZE
    );
    bodyGradient.addColorStop(0, "#2ecc71");
    bodyGradient.addColorStop(1, "#27ae60");

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–≤–µ—á–µ–Ω–∏—è
    ctx.fillStyle = glow;
    ctx.fillRect(
      segment.x - 10,
      segment.y - 10,
      GRID_SIZE + 20,
      GRID_SIZE + 20
    );
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ —Ç–µ–ª–∞
    ctx.fillStyle = bodyGradient;
    ctx.fillRect(segment.x, segment.y, GRID_SIZE, GRID_SIZE);
  });
}

// ============================================
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
// ============================================

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function handleKeyboardEvents(event) {
  const key = event.keyCode;

  if ([37, 38, 39, 40].includes(key)) event.preventDefault();

  // –ü–∞—É–∑–∞ –ø–æ –ø—Ä–æ–±–µ–ª—É
  if (key === 32 && !isDead) {
    isPaused = !isPaused;
    document.querySelector(".controls-info").textContent = isPaused
      ? "‚è∏ paused"
      : "‚Üê‚Üë‚Üí‚Üì to move ‚Ä¢ space to pause";
    return;
  }

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
  if (!isDead && !isPaused) {
    switch (key) {
      case 39: // –°—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ
        if (currentDirection !== DIRECTION_LEFT) currentDirection = DIRECTION_RIGHT;
        break;
      case 40: // –°—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑
        if (currentDirection !== DIRECTION_UP) currentDirection = DIRECTION_DOWN;
        break;
      case 37: // –°—Ç—Ä–µ–ª–∫–∞ –≤–ª–µ–≤–æ
        if (currentDirection !== DIRECTION_RIGHT) currentDirection = DIRECTION_LEFT;
        break;
      case 38: // –°—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö
        if (currentDirection !== DIRECTION_DOWN) currentDirection = DIRECTION_UP;
        break;
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initializeGame() {
  window.addEventListener("resize", setCanvasSize);
  setCanvasSize();
  resetSnake();
  spawnApple();
  setInterval(renderFrame, 1000 / FPS); // –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
  document.addEventListener("keydown", handleKeyboardEvents);
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
initializeGame();
